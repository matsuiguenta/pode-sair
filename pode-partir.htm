<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calculadora de Jornada de Trabalho</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>
<body class="bg-gray-100 min-h-screen">
    <div class="container mx-auto px-4 py-8 max-w-3xl">
        <div class="bg-white rounded-xl shadow-lg overflow-hidden">
            <!-- Header -->
            <div class="bg-gradient-to-r from-blue-600 to-indigo-700 p-6 text-white">
                <h1 class="text-2xl font-bold">Calculadora de Jornada</h1>
                <p class="opacity-90">Insira seus horários e calcule quando pode sair</p>
            </div>
            
            <!-- Main Content -->
            <div class="p-6">
                <!-- Configuração -->
                <div class="mb-8 p-4 bg-gray-50 rounded-lg">
                    <h2 class="text-lg font-semibold text-gray-800 mb-3">Configurações</h2>
                    <div class="flex items-center gap-4">
                        <div class="flex-1">
                            <label class="block text-sm font-medium text-gray-700 mb-1">Horas trabalhadas necessárias</label>
                            <input type="number" id="horasNecessarias" value="8" min="1" max="12" step="0.5" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Formato de hora</label>
                            <select id="formatoHora" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <option value="24">24 horas</option>
                                <option value="12">12 horas (AM/PM)</option>
                            </select>
                        </div>
                    </div>
                </div>
                
                <!-- Registros -->
                <div class="mb-8">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-lg font-semibold text-gray-800">Registros de Ponto</h2>
                        <button id="adicionarRegistro" class="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition">
                            <i class="fas fa-plus"></i> Adicionar
                        </button>
                    </div>
                    
                    <div id="registrosContainer" class="space-y-3">
                        <!-- Registros serão adicionados aqui dinamicamente -->
                        <div class="registro-item flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
                            <select class="tipo flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <option value="entrada">Entrada</option>
                                <option value="saida">Saída</option>
                            </select>
                            <input type="time" class="hora flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <button class="remover px-3 py-2 text-red-600 hover:text-red-800">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- Resultado -->
                <div id="resultadoContainer" class="hidden p-6 bg-indigo-50 rounded-lg border border-indigo-100">
                    <h2 class="text-lg font-semibold text-indigo-800 mb-2">Resultado</h2>
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-gray-600">Horas trabalhadas:</p>
                            <p id="horasTrabalhadas" class="text-xl font-bold text-gray-800">00:00</p>
                        </div>
                        <div class="text-center">
                            <p class="text-gray-600">Horas restantes:</p>
                            <p id="horasRestantes" class="text-xl font-bold text-gray-800">00:00</p>
                        </div>
                        <div class="text-right">
                            <p class="text-gray-600">Pode sair às:</p>
                            <p id="horaSaida" class="text-2xl font-bold text-indigo-600">--:--</p>
                        </div>
                    </div>
                </div>
                
                <!-- Ações -->
                <div class="flex justify-end gap-3 mt-6">
                    <button id="limpar" class="px-6 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-100 transition">
                        Limpar
                    </button>
                    <button id="calcular" class="px-6 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition">
                        Calcular
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Adicionar novo registro
            document.getElementById('adicionarRegistro').addEventListener('click', function() {
                const novoRegistro = document.createElement('div');
                novoRegistro.className = 'registro-item flex items-center gap-3 p-3 bg-gray-50 rounded-lg';
                novoRegistro.innerHTML = `
                    <select class="tipo flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option value="entrada">Entrada</option>
                        <option value="saida">Saída</option>
                    </select>
                    <input type="time" class="hora flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <button class="remover px-3 py-2 text-red-600 hover:text-red-800">
                        <i class="fas fa-trash"></i>
                    </button>
                `;
                document.getElementById('registrosContainer').appendChild(novoRegistro);
                
                // Adicionar evento de remoção
                novoRegistro.querySelector('.remover').addEventListener('click', function() {
                    novoRegistro.remove();
                });
            });
            
            // Limpar todos os registros
            document.getElementById('limpar').addEventListener('click', function() {
                document.getElementById('registrosContainer').innerHTML = '';
                document.getElementById('resultadoContainer').classList.add('hidden');
                
                // Adicionar um registro vazio inicial
                document.getElementById('adicionarRegistro').click();
            });
            
            // Calcular horário de saída
            document.getElementById('calcular').addEventListener('click', function() {
                const registros = Array.from(document.querySelectorAll('.registro-item')).map(item => {
                    return {
                        tipo: item.querySelector('.tipo').value,
                        hora: item.querySelector('.hora').value
                    };
                });
                
                const horasNecessarias = parseFloat(document.getElementById('horasNecessarias').value);
                const formatoHora = document.getElementById('formatoHora').value;
                
                // Validar registros
                if (registros.length === 0 || registros.some(r => !r.hora)) {
                    alert('Por favor, preencha todos os horários corretamente.');
                    return;
                }
                
                // Ordenar registros por hora
                registros.sort((a, b) => a.hora.localeCompare(b.hora));
                
                // Calcular tempo trabalhado
                let tempoTrabalhadoMinutos = 0;
                let ultimaEntrada = null;
                
                for (const registro of registros) {
                    if (registro.tipo === 'entrada') {
                        ultimaEntrada = registro.hora;
                    } else if (registro.tipo === 'saida' && ultimaEntrada) {
                        const entradaMin = timeToMinutes(ultimaEntrada);
                        const saidaMin = timeToMinutes(registro.hora);
                        tempoTrabalhadoMinutos += (saidaMin - entradaMin);
                        ultimaEntrada = null;
                    }
                }
                
                // Se ficou uma entrada sem saída, considerar até agora
                if (ultimaEntrada) {
                    const agora = new Date();
                    const horaAtual = `${String(agora.getHours()).padStart(2, '0')}:${String(agora.getMinutes()).padStart(2, '0')}`;
                    const entradaMin = timeToMinutes(ultimaEntrada);
                    const saidaMin = timeToMinutes(horaAtual);
                    tempoTrabalhadoMinutos += (saidaMin - entradaMin);
                }
                
                // Calcular horas restantes
                const horasNecessariasMinutos = horasNecessarias * 60;
                const horasRestantesMinutos = Math.max(0, horasNecessariasMinutos - tempoTrabalhadoMinutos);
                
                // Calcular horário de saída
                const agora = new Date();
                const minutosParaSaida = Math.ceil(horasRestantesMinutos);
                const horaSaida = new Date(agora.getTime() + minutosParaSaida * 60000);
                
                // Formatando os resultados
                const tempoTrabalhadoStr = formatMinutesToTime(tempoTrabalhadoMinutos);
                const horasRestantesStr = formatMinutesToTime(horasRestantesMinutos);
                let horaSaidaStr = formatDateToTime(horaSaida, formatoHora === '12');
                
                // Exibir resultados
                document.getElementById('horasTrabalhadas').textContent = tempoTrabalhadoStr;
                document.getElementById('horasRestantes').textContent = horasRestantesStr;
                document.getElementById('horaSaida').textContent = horaSaidaStr;
                document.getElementById('resultadoContainer').classList.remove('hidden');
            });
            
            // Funções auxiliares
            function timeToMinutes(timeStr) {
                const [hours, minutes] = timeStr.split(':').map(Number);
                return hours * 60 + minutes;
            }
            
            function formatMinutesToTime(minutes) {
                const hrs = Math.floor(minutes / 60);
                const mins = Math.floor(minutes % 60);
                return `${String(hrs).padStart(2, '0')}:${String(mins).padStart(2, '0')}`;
            }
            
            function formatDateToTime(date, use12Hour) {
                let hours = date.getHours();
                let minutes = date.getMinutes();
                let ampm = '';
                
                if (use12Hour) {
                    ampm = hours >= 12 ? ' PM' : ' AM';
                    hours = hours % 12;
                    hours = hours ? hours : 12; // Convert 0 to 12
                }
                
                return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}${ampm}`;
            }
            
            // Adicionar um registro inicial
            document.getElementById('adicionarRegistro').click();
        });
    </script>
</body>
</html>